{"version":3,"file":"build.es.js","sources":["../src/wrapper/actions/result.ts","../src/wrapper/actions/status.ts","../src/wrapper/consts/consts.ts","../src/wrapper/actions/actions/getAccount.ts","../src/wrapper/actions/actions/getBalance.ts","../src/wrapper/actions/actions/getBlock.ts","../src/wrapper/actions/actions/getBlockNumber.ts","../src/wrapper/actions/actions/getTransaction.ts","../src/wrapper/actions/actions/getTransactionCount.ts","../src/wrapper/actions/actions/sendSignedTransaction.ts","../src/wrapper/actions/actions/signWithPrivateKey.ts","../src/wrapper/actions/actions/signWithWallet.ts","../src/wrapper/actions/actions/signTransaction.ts","../src/wrapper/actions/actions/signTransactionPrivateKey.ts","../src/wrapper/actions/actions/sendTransaction.ts","../src/wrapper/actions/actions/loadContract.ts","../src/wrapper/actions/actions/actions.ts","../src/wrapper/connector.ts","../src/wrapper/contractCall.ts","../src/wrapper/actions/index.ts"],"sourcesContent":["interface ResultInterface{\n  code: number\n  data: any\n  message: string\n}\n\nclass Result implements ResultInterface{\n    public code\n    public data\n    public message\n    constructor(data:any){\n      this.code = data.code\n      this.data = data.data\n      this.message = data.message\n    }\n}\n\nexport { Result }","interface StatusInterface{\n  message:string\n  data:any\n  code:number\n}\n\nclass Status implements StatusInterface{\n  public message\n  public data\n  public code\n  constructor(code: number, message:string, data: any){\n    this.code = code\n    this.message = message\n    this.data = data\n  }\n}\n\nexport { Status }","import { Status } from \"../actions/status\"\n\nconst PredefinedStatus ={\n  SUCCESS:(userData)=>{return new Status(0,'success',userData)},\n  DEFAULT_STATE:(userData)=>{return new Status(1,'default state',userData)},\n  ERROR_STATE:(userData)=>{return new Status(4,'error state',userData)},\n  NOT_SUPPORT:(userData)=>{return new Status(5,'The method is not supported',userData)},\n}\n\nexport default PredefinedStatus\n","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport {getAccountInterface } from '../classInterface'\nimport { web3Accounts, web3Enable ,web3FromSource } from '@polkadot/extension-dapp';\n\nclass GetAccount{\n  public async getAccount(){\n    const allAccounts = await web3Accounts();\n    return new Result(PredefinedStatus.SUCCESS(allAccounts))\n  }\n}\nexport { GetAccount }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { Actions } from '../index'\nimport Decimal from 'decimal.js'\n\nclass GetBalance{\n  public async getBalance(address:string){\n    const { nonce, data: balance } = await (window as any).api.query.system.account(address);\n    let free = await new Decimal(`${balance.free}`).div(new Decimal(Math.pow(10,10))).toString()\n    return new Result(PredefinedStatus.SUCCESS(free))\n  }\n}\nexport { GetBalance }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { getBlockField } from '../../fieldDefinition/getBlockField'\nimport { Actions } from '../index'\n\nclass GetBlock{\n  public async getBlock(block:number|string){\n    const blockHash = await (window as any).api.rpc.chain.getBlockHash(block);\n    const signedBlock = await (window as any).api.rpc.chain.getBlock(blockHash);\n    let Block = JSON.parse(`${signedBlock.block.header}`)\n    return new Result(PredefinedStatus.SUCCESS(Block))\n  }\n}\nexport { GetBlock }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { Actions } from '../index'\n\nclass GetBlockNumber{\n  public async getBlockNumber(){\n    const lastHdr = await (window as any).api.rpc.chain.getHeader();\n    return new Result(PredefinedStatus.SUCCESS(`${lastHdr.number}`))\n  }\n}\nexport { GetBlockNumber }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { getTransactionField } from '../../fieldDefinition/getTransactionField'\nimport { Actions } from '../index'\n\nclass GetTransaction{\n  public async getTransaction(txHash:string){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { GetTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass GetTransactionCount{\n  public async getTransactionCount(address:string){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { GetTransactionCount }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { web3Accounts, web3Enable , web3FromSource} from '@polkadot/extension-dapp';\nimport { Actions } from '../index'\nimport Decimal from 'decimal.js'\n\nclass SendSignedTransaction{\n  public async sendSignedTransaction(address:string,count:string|number){\n    \n    const allAccounts = await web3Accounts();\n    const account = allAccounts[0];\n    let counts = await new Decimal(count).mul(new Decimal(Math.pow(10,10))).toString()\n    const transferExtrinsic = (window as any).api.tx.balances.transfer(address, counts)\n    const injector = await web3FromSource(account.meta.source);\n    const signer = await injector.signer\n    return new Promise((resolve,reject)=>{\n      transferExtrinsic.signAndSend(account.address, { signer: signer }, ({ status }) => {\n        if (status.isInBlock) {\n          console.log(`Completed at block hash #${status.asInBlock.toString()}`);\n          resolve(new Result(PredefinedStatus.SUCCESS(status.asInBlock.toString())))\n        } else {\n          console.log(`Current status: ${status.type}`);\n        }\n      }).catch((error: any) => {\n          console.log(':( transaction failed', error);\n          reject(new Result(PredefinedStatus.ERROR_STATE(null)))\n      });\n    })\n  }\n}\nexport { SendSignedTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { Keyring } from '@polkadot/api';\nimport { stringToU8a , u8aToHex } from '@polkadot/util' \n\nclass SignWithPrivateKey{\n  public async signWithPrivateKey(data:string|string,privateKey:string){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { SignWithPrivateKey }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { web3Accounts, web3Enable ,web3FromSource } from '@polkadot/extension-dapp';\nimport {stringToHex } from '@polkadot/util'\n\nclass SignWithWallet{\n  public async signWithWallet(dataToSign:any|string){\n    \n      const allAccounts = await web3Accounts();\n      const account = allAccounts[0];\n      const injector = await web3FromSource(account.meta.source);\n      const signRaw = injector.signer.signRaw;\n      const address = account.address\n      if (!!signRaw) {\n        const { signature } = await signRaw({\n          address,\n          data: stringToHex(dataToSign),\n          type: 'bytes'\n        });\n        return new Result(PredefinedStatus.SUCCESS(signature))\n      }else{\n        return new Result(PredefinedStatus.ERROR_STATE(null))\n      }\n  }\n}\nexport { SignWithWallet }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport {signTransactionField } from '../../fieldDefinition/signTransactionField'\n\nclass SignTransaction{\n  public async signTransaction(dataToSign:object|string,address:string){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { SignTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport {signTransactionField } from '../../fieldDefinition/signTransactionField'\n\nclass SignTransactionPrivateKey{\n  public async signTransactionPrivateKey(dataToSign:object|string,privateKey:string){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { SignTransactionPrivateKey }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { Actions } from '../index'\n\nclass SendTransaction{\n  public async sendTransaction(transactionObject:object){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { SendTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass LoadContract{\n  public async loadContract(abi:any,address:string){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { LoadContract }","import { GetAccount } from \"./getAccount\"\nimport { GetBalance } from \"./getBalance\"\nimport { GetBlock } from './getBlock'\nimport { GetBlockNumber }  from './getBlockNumber' \nimport { GetTransaction } from './getTransaction'\nimport { GetTransactionCount } from './getTransactionCount'\nimport { SendSignedTransaction } from './sendSignedTransaction'\nimport { SignWithPrivateKey } from './signWithPrivateKey'\nimport { SignWithWallet } from './signWithWallet'\nimport { SignTransaction } from './signTransaction'\nimport { SignTransactionPrivateKey } from \"./signTransactionPrivateKey\"\nimport { SendTransaction } from './sendTransaction'\nimport { LoadContract } from './loadContract'\n\nclass ActionsIn{\n  constructor(){\n     \n  }\n  public async getAccount(){\n    return await new GetAccount().getAccount()\n  }\n  public async getBalance(address:string){\n    return await new GetBalance().getBalance(address)\n  }\n  public async getBlock(block:string|number){\n    return await new GetBlock().getBlock(block)\n  }\n  public async getBlockNumber(){\n    return await new GetBlockNumber().getBlockNumber()\n  }\n  public async getTransaction(txHash:string){\n    return await new GetTransaction().getTransaction(txHash)\n  }\n  public async getTransactionCount(txHash:string){\n    return await new GetTransactionCount().getTransactionCount(txHash)\n  }\n  public async sendSignedTransaction(address:string,count:string|number){\n    return await new SendSignedTransaction().sendSignedTransaction(address,count)\n  }\n  public async signWithWallet(dataToSign:any|string){\n    return await new SignWithWallet().signWithWallet(dataToSign)\n  }\n  public async signWithPrivateKey(data:string|string,privateKey:string){\n    return await new SignWithPrivateKey().signWithPrivateKey(data,privateKey)\n  }\n  public async signTransaction(dataToSign:object|string,address:string){\n    return await new SignTransaction().signTransaction(dataToSign,address)\n  }\n  public async signTransactionPrivateKey(dataToSign:object|string,privateKey:string){\n    return await new SignTransactionPrivateKey().signTransactionPrivateKey(dataToSign,privateKey)\n  }\n  public async sendTransaction(transactionObject:any){\n    return await new SendTransaction().sendTransaction(transactionObject)\n  }\n  public async loadContract(contract:any,address:string){\n    return await new LoadContract().loadContract(contract,address)\n  }\n \n}\n\nexport { ActionsIn } \n ","import { Result } from '../wrapper/actions/result'\nimport PredefinedStatus  from '../wrapper/consts/consts'\nimport {\n  web3Accounts,\n  web3Enable,\n  web3FromAddress,\n  web3ListRpcProviders,\n  web3UseRpcProvider\n} from '@polkadot/extension-dapp';\n\nclass Connector {\n  public async link(){\n    const extensions = await web3Enable('my cool dapp');\n      \n    const allAccounts = await web3Accounts();\n    return new Result(PredefinedStatus.SUCCESS(allAccounts))\n  }\n}\nexport { Connector }","import { Result } from '../wrapper/actions/result'\nimport PredefinedStatus  from '../wrapper/consts/consts'\n\n \n\nclass ContractCall {\n  public async offChainCall(contract:any,methodName:string,param:[],amount,extra){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n\n  public async onChainCall(contract:any,methodName:string,param:any,extra:any){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n  \n}\nexport { ContractCall }","import { ActionsIn }  from '../actions/actions/actions'\nimport { Connector } from '../connector'\nimport PredefinedStatus  from '../consts/consts'\nimport { Result } from '../actions/result'\nimport { ContractCall } from '../contractCall'\nimport {ApiPromise, WsProvider} from '@polkadot/api'\n\nclass Actions {\n  public actions:ActionsIn\n  public connector:Connector\n  public contract:ContractCall\n  constructor() {\n    this.actions = new ActionsIn()\n    this.connector = new Connector()\n    this.contract = new ContractCall()\n  }\n  public async init(rpc:string){\n    const wsProvider = new WsProvider(rpc);\n    (window as any).api = await ApiPromise.create({ provider: wsProvider });\n    return new Result(PredefinedStatus.SUCCESS((window as any).api))\n  }\n}\n\nexport { Actions }\n"],"names":["Result","[object Object]","data","this","code","message","Status","PredefinedStatus","SUCCESS","userData","DEFAULT_STATE","ERROR_STATE","NOT_SUPPORT","GetAccount","allAccounts","web3Accounts","GetBalance","address","nonce","balance","window","api","query","system","account","free","Decimal","div","Math","pow","toString","GetBlock","block","blockHash","rpc","chain","getBlockHash","signedBlock","getBlock","Block","JSON","parse","header","GetBlockNumber","lastHdr","getHeader","number","GetTransaction","txHash","GetTransactionCount","SendSignedTransaction","count","counts","mul","transferExtrinsic","tx","balances","transfer","injector","web3FromSource","meta","source","signer","Promise","resolve","reject","signAndSend","status","isInBlock","console","log","asInBlock","type","catch","error","SignWithPrivateKey","privateKey","SignWithWallet","dataToSign","signRaw","signature","stringToHex","SignTransaction","SignTransactionPrivateKey","SendTransaction","transactionObject","LoadContract","abi","ActionsIn","getAccount","getBalance","getBlockNumber","getTransaction","getTransactionCount","sendSignedTransaction","signWithWallet","signWithPrivateKey","signTransaction","signTransactionPrivateKey","sendTransaction","contract","loadContract","Connector","web3Enable","ContractCall","methodName","param","amount","extra","Actions","actions","connector","wsProvider","WsProvider","ApiPromise","create","provider"],"mappings":"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"}