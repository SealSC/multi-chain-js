{"version":3,"file":"build.es.js","sources":["../src/wrapper/web3.js","../src/wrapper/actions/result.ts","../src/wrapper/actions/status.ts","../src/wrapper/consts/consts.ts","../src/wrapper/actions/actions/getAccount.ts","../src/wrapper/actions/actions/getBalance.ts","../src/wrapper/fieldDefinition/getBlockField.ts","../src/wrapper/actions/actions/getBlock.ts","../src/wrapper/actions/actions/getBlockNumber.ts","../src/wrapper/fieldDefinition/getTransactionField.ts","../src/wrapper/actions/actions/getTransaction.ts","../src/wrapper/actions/actions/getTransactionCount.ts","../src/wrapper/actions/actions/sendSignedTransaction.ts","../src/wrapper/actions/actions/signWithPrivateKey.ts","../src/wrapper/actions/actions/signWithWallet.ts","../src/wrapper/actions/actions/signTransaction.ts","../src/wrapper/actions/actions/signtransactionPrivateKey.ts","../src/wrapper/actions/actions/sendTransaction.ts","../src/wrapper/actions/actions/loadContract.ts","../src/wrapper/actions/actions/actions.ts","../src/wrapper/connector.ts","../src/wrapper/utils.ts","../src/wrapper/contractCall.ts","../src/wrapper/actions/index.ts"],"sourcesContent":["import Web3js from 'web3'\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nlet provider = null\n\nasync function web3Install(){\n  provider = await detectEthereumProvider()\n  if(provider){\n    return new Web3js(provider)\n  }else{\n    return null\n  }\n}\nexport { web3Install };\n","interface ResultInterface{\n  code: number\n  data: any\n  message: string\n}\n\nclass Result implements ResultInterface{\n    public code\n    public data\n    public message\n    constructor(data:any){\n      this.code = data.code\n      this.data = data.data\n      this.message = data.message\n    }\n}\n\nexport { Result }","interface StatusInterface{\n  message:string\n  data:any\n  code:number\n}\n\nclass Status implements StatusInterface{\n  public message\n  public data\n  public code\n  constructor(code: number, message:string, data: any){\n    this.code = code\n    this.message = message\n    this.data = data\n  }\n}\n\nexport { Status }","import { Status } from \"../actions/status\"\n\nconst PredefinedStatus ={\n  SUCCESS:(userData)=>{return new Status(0,'success',userData)},\n  DEFAULT_STATE:(userData)=>{return new Status(1,'default state',userData)},\n  ERROR_STATE:(userData)=>{return new Status(4,'error state',userData)},\n  NOT_SUPPORT:(userData)=>{return new Status(5,'The method is not supported',userData)},\n}\n\nexport default PredefinedStatus\n","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport {getAccountInterface } from '../classInterface'\n\nclass GetAccount{\n  public async getAccount(){\n   try{\n      let accounts = await (window as any).web3.eth.getAccounts()\n      return new Result(PredefinedStatus.SUCCESS(accounts))\n    }catch(error){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { GetAccount }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass GetBalance{\n  public async getBalance(address:string){\n    try{\n      let Balance = await (window as any).web3.eth.getBalance(address)\n      return new Result(PredefinedStatus.SUCCESS(Balance))\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { GetBalance }","interface BlockDataField{\n  number:Number\n  hash:string \n  parentHash: string\n  nonce: string\n  sha3Uncles: string\n  logsBloom:string\n  transactionsRoot: string\n  stateRoot: string\n  miner:string\n  difficulty: string\n  totalDifficulty: string\n  size: number\n  extraData: string\n  gasLimit: number\n  gasUsed: number\n  timestamp: number\n  transactions:Array<string>\n  uncles:[]\n}\n\nclass getBlockField implements BlockDataField{\n  public number\n  public hash\n  public parentHash\n  public nonce\n  public sha3Uncles\n  public logsBloom\n  public transactionsRoot\n  public stateRoot\n  public miner\n  public difficulty\n  public totalDifficulty\n  public size\n  public extraData\n  public gasLimit\n  public gasUsed\n  public timestamp\n  public transactions\n  public uncles\n}\n\n\nexport { getBlockField }\n","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { getBlockField } from '../../fieldDefinition/getBlockField'\n\nclass GetBlock{\n  public async getBlock(block:number|string){\n    try{\n      let blockData = await (window as any).web3.eth.getBlock(block)\n      let blockDataField = new getBlockField()\n      blockDataField.number = blockData.number\n      blockDataField.hash = blockData.hash\n      blockDataField.parentHash = blockData.parentHash\n      blockDataField.nonce = blockData.nonce\n      blockDataField.sha3Uncles = blockData.sha3Uncles\n      blockDataField.logsBloom = blockData.logsBloom\n      blockDataField.transactionsRoot = blockData.transactionsRoot\n      blockDataField.stateRoot = blockData.stateRoot\n      blockDataField.miner = blockData.miner\n      blockDataField.difficulty = blockData.difficulty\n      blockDataField.totalDifficulty = blockData.totalDifficulty\n      blockDataField.size = blockData.size\n      blockDataField.extraData = blockData.extraData\n      blockDataField.gasLimit = blockData.gasLimit\n      blockDataField.gasUsed = blockData.gasUsed\n      blockDataField.timestamp = blockData.timestamp\n      blockDataField.transactions = blockData.transactions\n      blockDataField.uncles = blockData.uncles\n      return new Result(PredefinedStatus.SUCCESS(blockDataField))\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { GetBlock }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass GetBlockNumber{\n  public async getBlockNumber(){\n    try{\n      let blockNumber = await (window as any).web3.eth.getBlockNumber()\n      return new Result(PredefinedStatus.SUCCESS(blockNumber))\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { GetBlockNumber }","interface TransactionField{\n  hash:string \n  nonce: number\n  blockHash: string\n  blockNumber:Number\n  transactionIndex: number\n  from: string\n  to: string\n  value: number\n  gas: number\n  gasPrice: string\n  input: string\n}\n\nclass getTransactionField implements TransactionField{\n  public hash\n  public nonce\n  public blockHash\n  public blockNumber\n  public transactionIndex\n  public from\n  public to\n  public value\n  public gas\n  public gasPrice\n  public input\n}\n\n\nexport { getTransactionField }\n","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { getTransactionField } from '../../fieldDefinition/getTransactionField'\n\nclass GetTransaction{\n  public async getTransaction(txHash:string){\n    try{\n      let Transaction = await (window as any).web3.eth.getTransaction(txHash)\n      let TransactionDataField = new getTransactionField()\n      if(Transaction){\n        TransactionDataField.hash = Transaction.hash\n        TransactionDataField.nonce = Transaction.nonce\n        TransactionDataField.blockHash = Transaction.blockHash\n        TransactionDataField.blockNumber = Transaction.blockNumber\n        TransactionDataField.transactionIndex = Transaction.transactionIndex\n        TransactionDataField.from = Transaction.from\n        TransactionDataField.to = Transaction.to\n        TransactionDataField.value = Transaction.value\n        TransactionDataField.gas = Transaction.gas\n        TransactionDataField.gasPrice = Transaction.gasPrice\n        TransactionDataField.input = Transaction.input\n        return new Result(PredefinedStatus.SUCCESS(TransactionDataField))\n      }else{\n        return new Result(PredefinedStatus.ERROR_STATE(null))\n      }\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { GetTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass GetTransactionCount{\n  public async getTransactionCount(address:string){\n    try{\n      let Transaction = await (window as any).web3.eth.getTransactionCount(address)\n      return new Result(PredefinedStatus.SUCCESS(Transaction))\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n    \n  }\n}\nexport { GetTransactionCount }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass SendSignedTransaction{\n  public async sendSignedTransaction(dataToSign:string){\n    try{\n      let signTransaction = await (window as any).web3.eth.sendSignedTransaction(dataToSign)\n      return new Result(PredefinedStatus.SUCCESS(signTransaction))\n    }catch(err){\n      return new Result(PredefinedStatus.DEFAULT_STATE(null))\n    }\n    \n  }\n}\nexport { SendSignedTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass SignWithPrivateKey{\n  public async signWithPrivateKey(data:string|string,privateKey:string){\n    try{\n      let sign = await (window as any).web3.eth.accounts.sign(data,privateKey)\n      return new Result(PredefinedStatus.SUCCESS(sign))\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n    \n  }\n}\nexport { SignWithPrivateKey }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport { web3Install } from '../../web3'\n\nclass SignWithWallet{\n  public async signWithWallet(dataToSign:any|string,address:string){\n    try{\n      let dataSign = await (window as any).web3.utils.utf8ToHex(dataToSign)\n      let sign = await (window as any).web3.eth.personal.sign(dataSign,address)\n      return new Result(PredefinedStatus.SUCCESS(sign))\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { SignWithWallet }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport {signTransactionField } from '../../fieldDefinition/signTransactionField'\n\nclass SignTransaction{\n  public async signTransaction(dataToSign:object|string,address:string){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { SignTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport {signTransactionField } from '../../fieldDefinition/signTransactionField'\n\nclass SignTransactionPrivateKey{\n  public async signTransactionPrivateKey(dataToSign:object|string,privateKey:string){\n    try{\n      let signTransaction = await (window as any).web3.eth.accounts.signTransaction(dataToSign,privateKey)\n      return new Result(PredefinedStatus.SUCCESS(signTransaction))\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  \n  }\n}\nexport { SignTransactionPrivateKey }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass SendTransaction{\n  public async sendTransaction(transactionObject:object){\n    try{\n      return await (window as any).web3.eth.sendTransaction(transactionObject).then((receipt)=>{\n        return new Result(PredefinedStatus.SUCCESS(receipt))\n      })\n    }catch(err){\n      return new Result(PredefinedStatus.DEFAULT_STATE(null))\n    }\n    \n  }\n}\nexport { SendTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass LoadContract{\n  public async loadContract(abi:any,address:string){\n    try{\n      let Contract: any = await new (window as any).web3.eth.Contract(abi,address)\n      return new Result(PredefinedStatus.SUCCESS(Contract))\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { LoadContract }","import { GetAccount } from \"./getAccount\"\nimport { GetBalance } from \"./getBalance\"\nimport { GetBlock } from './getBlock'\nimport { GetBlockNumber }  from './getBlockNumber' \nimport { GetTransaction } from './getTransaction'\nimport { GetTransactionCount } from './getTransactionCount'\nimport { SendSignedTransaction } from './sendSignedTransaction'\nimport { SignWithPrivateKey } from './signWithPrivateKey'\nimport { SignWithWallet } from './signWithWallet'\nimport { SignTransaction } from './signTransaction'\nimport { SignTransactionPrivateKey } from \"./signtransactionPrivateKey\"\nimport { SendTransaction } from './sendTransaction'\nimport { LoadContract } from './loadContract'\n\nclass ActionsIn{\n  constructor(){\n     \n  }\n  public async getAccount(){\n    return await new GetAccount().getAccount()\n  }\n  public async getBalance(address:string){\n    return await new GetBalance().getBalance(address)\n  }\n  public async getBlock(block:string|number){\n    return await new GetBlock().getBlock(block)\n  }\n  public async getBlockNumber(){\n    return await new GetBlockNumber().getBlockNumber()\n  }\n  public async getTransaction(txHash:string){\n    return await new GetTransaction().getTransaction(txHash)\n  }\n  public async getTransactionCount(txHash:string){\n    return await new GetTransactionCount().getTransactionCount(txHash)\n  }\n  public async sendSignedTransaction(dataToSign:string){\n    return await new SendSignedTransaction().sendSignedTransaction(dataToSign)\n  }\n  public async signWithWallet(dataToSign:any|string,address:string){\n    return await new SignWithWallet().signWithWallet(dataToSign,address)\n  }\n  public async signWithPrivateKey(data:string|string,privateKey:string){\n    return await new SignWithPrivateKey().signWithPrivateKey(data,privateKey)\n  }\n  public async signTransaction(dataToSign:object|string,address:string){\n    return await new SignTransaction().signTransaction(dataToSign,address)\n  }\n  public async signTransactionPrivateKey(dataToSign:object|string,privateKey:string){\n    return await new SignTransactionPrivateKey().signTransactionPrivateKey(dataToSign,privateKey)\n  }\n  public async sendTransaction(transactionObject:any){\n    return await new SendTransaction().sendTransaction(transactionObject)\n  }\n  public async loadContract(contract:any,address:string){\n    return await new LoadContract().loadContract(contract,address)\n  }\n \n}\n\nexport { ActionsIn } \n ","import { Result } from '../wrapper/actions/result'\nimport PredefinedStatus  from '../wrapper/consts/consts'\n\nclass Connector {\n  public link(){\n    if((window as any).ethereum.enable){\n      let account = (window as any).ethereum.selectedAddress\n      if(!account){\n        return (window as any).ethereum.enable().then((account)=>{\n          return new Result(PredefinedStatus.SUCCESS(account[0]))\n        })\n      }else{\n        return new Result(PredefinedStatus.SUCCESS(account))\n      }\n    }else{\n      return new Result(PredefinedStatus.ERROR_STATE('Please go and install'))\n    }\n  }\n}\nexport { Connector }","import { Result } from '../wrapper/actions/result'\nimport PredefinedStatus  from '../wrapper/consts/consts'\n\nconst defaultGas={\n  price:'4000000000',\n  limit:'150000'\n}\nfunction GasSetting(setting):any{\n  setting.gasPrice = setting.gasPrice ? setting.gasPrice : defaultGas.price\n  setting.gasLimit = setting.gasLimit ? setting.gasLimit : defaultGas.limit\n  return setting\n}\n\nlet transactionResultGetter = function (resolve, data , err) {\n  let result\n  console.log(data)\n  if(err) {\n    result = new Result(PredefinedStatus.ERROR_STATE(null))\n  } else {\n    result = new Result(PredefinedStatus.SUCCESS(data))\n  }\n  resolve(result)\n}\n\nexport {\n  GasSetting,\n  transactionResultGetter\n}","import { Result } from '../wrapper/actions/result'\nimport PredefinedStatus  from '../wrapper/consts/consts'\nimport { GasSetting , transactionResultGetter } from '../wrapper/utils' \n\nfunction getContractMethod(contract:any,methodName:string,param:any){\n  let method;\n  try{\n    method = contract.methods[methodName]\n  }catch(error){\n    method = null\n  }\n  \n  if(!method) return null\n  let prop = method(...param)._method\n  return {\n    prop:prop,\n    func:method\n  }\n}\n\nclass ContractCall {\n  public async offChainCall(contract:any,methodName:string,param:[],amount,extra){\n    let account = Object.keys((window as any).web3).length !== 0 ? await (window as any).web3.eth.getAccounts():[''];\n    let method = getContractMethod(contract,methodName,param)\n   \n    if(!method){\n      return new Result(PredefinedStatus.ERROR_STATE('参数有误'))\n    }\n    return await new Promise(async res=>{\n      method!.func(...param).call({from:account[0],gas:'100000000'},(err,result)=>{\n        transactionResultGetter(res, result, err)\n      }).catch(reason=>{\n        console.log(2)\n        transactionResultGetter(res, reason, null)\n      })\n    })\n  }\n\n  public async onChainCall(contract:any,methodName:string,param:any,extra:any){\n \n    let account = Object.keys((window as any).web3).length !== 0 ? await (window as any).web3.eth.getAccounts():[''];\n    console.log(account)\n  \n    let method = getContractMethod(contract,methodName,param)\n    if(!method){\n      return new Result(PredefinedStatus.ERROR_STATE('参数有误'))\n    }\n    let gasSetting = GasSetting(extra)\n    let sendParam={\n      from:account[0],\n      gasPrice:gasSetting.gasPrice,\n      gas:gasSetting.gasLimit\n    }\n    return await new Promise(res=>{\n      method!.func(...param).send(sendParam,(err,tx)=>{\n        // transactionResultGetter(res, err, tx)\n      }).then(receipt=>{\n        transactionResultGetter(res, receipt, null)\n      }).catch(reason=>{\n        transactionResultGetter(res, reason, null)\n      })\n    })\n  }\n  \n}\nexport { ContractCall , getContractMethod }","import { web3Install } from '../../wrapper/web3'\nimport { ActionsIn }  from '../actions/actions/actions'\nimport { Connector } from '../connector'\nimport PredefinedStatus  from '../consts/consts'\nimport { Result } from '../actions/result'\nimport { ContractCall } from '../contractCall'\n\nclass Actions {\n  public actions:ActionsIn\n  public connector:Connector\n  public contract:ContractCall\n  constructor() {\n    this.actions = new ActionsIn()\n    this.connector = new Connector()\n    this.contract = new ContractCall()\n  }\n  public async init(){\n    (window as any).web3 = await web3Install()\n    return new Result(PredefinedStatus.SUCCESS(null))\n  }\n}\n\nexport { Actions }\n"],"names":["provider","Result","[object Object]","data","this","code","message","Status","PredefinedStatus","SUCCESS","userData","DEFAULT_STATE","ERROR_STATE","NOT_SUPPORT","GetAccount","accounts","window","web3","eth","getAccounts","error","GetBalance","address","Balance","getBalance","err","getBlockField","GetBlock","block","blockData","getBlock","blockDataField","number","hash","parentHash","nonce","sha3Uncles","logsBloom","transactionsRoot","stateRoot","miner","difficulty","totalDifficulty","size","extraData","gasLimit","gasUsed","timestamp","transactions","uncles","GetBlockNumber","blockNumber","getBlockNumber","getTransactionField","GetTransaction","txHash","Transaction","getTransaction","TransactionDataField","blockHash","transactionIndex","from","to","value","gas","gasPrice","input","GetTransactionCount","getTransactionCount","SendSignedTransaction","dataToSign","signTransaction","sendSignedTransaction","SignWithPrivateKey","privateKey","sign","SignWithWallet","dataSign","utils","utf8ToHex","personal","SignTransaction","SignTransactionPrivateKey","SendTransaction","transactionObject","sendTransaction","then","receipt","LoadContract","abi","Contract","ActionsIn","getAccount","signWithWallet","signWithPrivateKey","signTransactionPrivateKey","contract","loadContract","Connector","ethereum","enable","account","selectedAddress","defaultGas","transactionResultGetter","resolve","result","console","log","getContractMethod","methodName","param","method","methods","prop","_method","func","ContractCall","amount","extra","Object","keys","length","Promise","res","call","catch","reason","gasSetting","setting","sendParam","send","tx","Actions","actions","connector","async","detectEthereumProvider","Web3js","web3Install"],"mappings":"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"}