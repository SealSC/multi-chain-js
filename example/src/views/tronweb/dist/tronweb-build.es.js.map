{"version":3,"file":"tronweb-build.es.js","sources":["../src/wrapper/tronweb.js","../src/wrapper/actions/result.ts","../src/wrapper/actions/status.ts","../src/wrapper/consts/consts.ts","../src/wrapper/actions/actions/getAccount.ts","../src/wrapper/actions/actions/getBalance.ts","../src/wrapper/actions/actions/getBlock.ts","../src/wrapper/actions/actions/getBlockNumber.ts","../src/wrapper/actions/actions/getTransaction.ts","../src/wrapper/actions/actions/getTransactionCount.ts","../src/wrapper/actions/actions/sendSignedTransaction.ts","../src/wrapper/actions/actions/signWithPrivateKey.ts","../src/wrapper/actions/actions/signWithWallet.ts","../src/wrapper/actions/actions/signTransaction.ts","../src/wrapper/actions/actions/signTransactionPrivateKey.ts","../src/wrapper/actions/actions/sendTransaction.ts","../src/wrapper/actions/actions/loadContract.ts","../src/wrapper/actions/actions/actions.ts","../src/wrapper/utils.ts","../src/wrapper/contractCall.ts","../src/wrapper/actions/index.ts"],"sourcesContent":["// import TronWeb from 'tronweb'\nlet TronWeb = require(\"tronweb\")\nlet HttpProvider=null\nasync function tronWebInstall(){\n \n  if(tronWeb.isTronLink){\n    if (!window.tronWeb) { \n      HttpProvider = TronWeb.providers.HttpProvider;\n      const fullNode = new HttpProvider('https://api.shasta.trongrid.io');\n      const solidityNode = new HttpProvider('https://api.shasta.trongrid.io');\n      const eventServer = 'https://api.shasta.trongrid.io';\n      const tronWeb = new TronWeb(fullNode,solidityNode,eventServer);\n      return tronWeb;\n    }else{\n     return window.tronWeb\n     \n    }\n  }else{\n    HttpProvider = TronWeb.providers.HttpProvider;\n    if(HttpProvider){\n      const fullNode = new HttpProvider(\"https://api.shasta.trongrid.io\");\n      const solidityNode = new HttpProvider(\"https://api.shasta.trongrid.io\");\n      const eventServer = \"https://api.shasta.trongrid.io\";\n      const tronWeb = new TronWeb(fullNode, solidityNode, eventServer);\n      return tronWeb\n    }else{\n      return null\n    }\n  }\n    \n\n}\n\n\nexport { tronWebInstall };","interface ResultInterface{\n  code: number\n  data: any\n  message: string\n}\n\nclass Result implements ResultInterface{\n    public code\n    public data\n    public message\n    constructor(data:any){\n      this.code = data.code\n      this.data = data.data\n      this.message = data.message\n    }\n}\n\nexport { Result }","interface StatusInterface{\n  message:string\n  data:any\n  code:number\n}\n\nclass Status implements StatusInterface{\n  public message\n  public data\n  public code\n  constructor(code: number, message:string, data: any){\n    this.code = code\n    this.message = message\n    this.data = data\n  }\n}\n\nexport { Status }","import { Status } from \"../actions/status\"\n\nconst PredefinedStatus ={\n  SUCCESS:(userData : any)=>{return new Status(0,'success',userData)},\n  DEFAULT_STATE:(userData: any)=>{return new Status(1,'default state',userData)},\n  ERROR_STATE:(userData: any)=>{return new Status(4,'error state',userData)},\n  NOT_SUPPORT:(userData: any)=>{return new Status(5,'The method is not supported',userData)},\n}\n\nexport default PredefinedStatus\n","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport {getAccountInterface } from '../classInterface'\n\nclass GetAccount{\n  public async getAccount(address:string){\n    try{\n        let accounts = await (window as any).tronWeb.trx.getAccount(address)\n        let data=[accounts.address]\n        console.log(accounts.address,\"PP\")\n        return new Result(PredefinedStatus.SUCCESS(data))\n\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { GetAccount }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass GetBalance{\n  public async getBalance(address:string){\n    // try{\n      let Balance = await (window as any).tronWeb.trx.getBalance(address)\n      return new Result(PredefinedStatus.SUCCESS(Balance))\n    // }catch(err){\n    //   return new Result(PredefinedStatus.ERROR_STATE(null))\n    // }\n  }\n}\nexport { GetBalance }","import { Result } from '../result'\nimport PredefinedStatus from '../../consts/consts'\n\n// import { getBlockField } from '../../fieldDefinition/getBlockField'\n\n\nclass GetBlock {\n  public async getBlock(block: number | string) {\n    // try {\n      let blockData = await (window as any).tronWeb.trx.getBlock(block)\n      let data = {\n        \"number\": blockData.block_header.raw_data.number,\n        \"parentHash\": blockData.block_header.raw_data.parentHash,\n        \"miner\": blockData.block_header.raw_data.witness_address,\n        \"timestamp\": blockData.block_header.raw_data.timestamp,\n        'hash': blockData.blockID,\n        'nonce': null,\n        'sha3Uncles': null,\n        'logsBloom': null,\n        'transactionsRoot': blockData.block_header.raw_data.txTrieRoot,\n        'stateRoot': null,\n        'difficulty': null,\n        'totalDifficulty': null,\n        'extraData': null,\n        'size': null,\n        'gasLimit': null,\n        'gasUsed': null,\n        'transactions': blockData.transactions ? blockData.transactions.length : 0,\n        'uncles': null\n\n      }\n      return new Result(PredefinedStatus.SUCCESS(data))\n    // } catch (err) {\n    //   return new Result(PredefinedStatus.ERROR_STATE(null))\n    // }\n  }\n}\nexport { GetBlock }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass GetBlockNumber{\n  public async getBlockNumber(block:string|number){\n    // try{\n      let blockNumber = await (window as any).tronWeb.trx.getBlock(block)\n      let data=blockNumber.block_header.raw_data.number\n      return new Result(PredefinedStatus.SUCCESS(data))\n    // }catch(err){\n    //   return new Result(PredefinedStatus.ERROR_STATE(null))\n    // }\n  }\n}\nexport { GetBlockNumber }","import { Result } from '../result'\nimport PredefinedStatus from '../../consts/consts'\n\n// import { getTransactionField } from '../../fieldDefinition/getTransactionField'\n\n\nclass GetTransaction {\n  public async getTransaction(txHash: string) {\n    try {\n      let Transaction = await (window as any).tronWeb.trx.getTransactionInfo(txHash)\n      let blockData = await (window as any).tronWeb.trx.getBlock(Transaction.blockNumber)\n      let transactionData = await (window as any).tronWeb.trx.getTransaction(txHash)\n      let from = await (window as any).tronWeb.address.fromHex(transactionData.raw_data.contract[0].parameter.value.owner_address)\n      let to = await (window as any).tronWeb.address.fromHex(transactionData.raw_data.contract[0].parameter.value.contract_address) ?\n        await (window as any).tronWeb.address.fromHex(transactionData.raw_data.contract[0].parameter.value.contract_address) :\n        await (window as any).tronWeb.address.fromHex(transactionData.raw_data.contract[0].parameter.value.to_address)\n      function getIndex() {\n        if(blockData.transactions){\n          for (let i = 0; i < blockData.transactions.length; i++) {\n            if (Transaction.id == blockData.transactions[i].txID) {\n              return i\n            }else{\n              \n              return null\n            }\n          }\n        }else{\n          return null\n        }\n      }\n      function getAmount() {\n        let amount=0\n        if(transactionData.raw_data.contract[0].parameter.type=='TransferAssetContract' ||\n        !transactionData.raw_data.contract[0].parameter.value.amount){\n          amount = 0\n       }else {\n         amount = transactionData.raw_data.contract[0].parameter.value.amount\n       }\n       return amount\n      }\n      let input= transactionData.raw_data.contract[0].parameter.value. data\n      if (Transaction) {\n\n        let data = {\n          \"hash\": Transaction.id,\n          \"nonce\": null,\n          \"blockHash\": blockData.blockID,\n          \"blockNumber\": Transaction.blockNumber,\n          \"transactionIndex\": getIndex(),\n          \"from\": from,\n          \"to\": to,\n          \"value\": getAmount(),\n          \"gas\": null,\n          \"gasPrice\": null,\n          \"input\": input\n        }\n\n        return new Result(PredefinedStatus.SUCCESS(data))\n      } else {\n        return new Result(PredefinedStatus.ERROR_STATE(null))\n      }\n    } catch (err) {\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { GetTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass GetTransactionCount{\n  public async getTransactionCount(){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { GetTransactionCount }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nlet TronWeb = require(\"tronweb\")\nclass SendSignedTransaction{\n  public async sendSignedTransaction(to,amount,from,options,privateKey:string){\n    try{\n      let  HttpProvider = TronWeb.providers.HttpProvider;\n      let tronwebww=null as any\n     if(HttpProvider){\n       const fullNode = new HttpProvider(\"https://api.shasta.trongrid.io\");\n       const solidityNode = new HttpProvider(\"https://api.shasta.trongrid.io\");\n       const eventServer = \"https://api.shasta.trongrid.io\";\n       const tronWeb = new TronWeb(fullNode, solidityNode, eventServer);\n       tronwebww = tronWeb;\n     }\n      const tradeobj = await (window as any).tronWeb.transactionBuilder.sendTrx(to,\n        amount,\n        from,\n        options\n        );\n        \n      const signedtxn = await tronwebww.trx.sign(tradeobj, privateKey);\n      \n      let signTransaction:any= await tronwebww.trx.sendRawTransaction(signedtxn);\n      \n      return new Result(PredefinedStatus.SUCCESS(signTransaction))\n    }catch(err){\n      return new Result(PredefinedStatus.NOT_SUPPORT(null));\n    }\n  }\n}\nexport { SendSignedTransaction }","import { Result } from '../result'\nimport PredefinedStatus from '../../consts/consts'\n\nclass SignWithPrivateKey {\n\n  public async signWithPrivateKey() {\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n\n  }\n}\nexport { SignWithPrivateKey }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n\nclass SignWithWallet{\n\n  public async signWithWallet(dataToSign:string){\n    // try{\n    //   console.log(1111)\n    //   console.log(await (window as any).tronWeb.trx,\"#####$$$$$\")\n    //   const signedtxn = await (window as any).tronWeb.trx.signMessage(dataToSign);\n    //   return new Result(PredefinedStatus.SUCCESS(signedtxn))\n    // }catch(err){\n    //   console.log(2222)\n    //   return new Result(PredefinedStatus.ERROR_STATE(null))\n    // }\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n\n  }\n}\nexport { SignWithWallet }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\n// import {signTransactionField } from '../../fieldDefinition/signTransactionField'\n\n\nclass SignTransaction{\n  public async signTransaction(dataToSign:object|string,address:string){\n    return new Result(PredefinedStatus.NOT_SUPPORT(null))\n  }\n}\nexport { SignTransaction }","\nimport { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nlet TronWeb = require(\"tronweb\")\nimport { tronWebInstall } from '../../tronweb'\nclass SignTransactionPrivateKey{\n  public async signTransactionPrivateKey(dataToSign:any,privateKey:string){\n    try{\n      let  HttpProvider = TronWeb.providers.HttpProvider;\n      let tronwebww=null as any\n     if(HttpProvider){\n       const fullNode = new HttpProvider(\"https://api.shasta.trongrid.io\");\n       const solidityNode = new HttpProvider(\"https://api.shasta.trongrid.io\");\n       const eventServer = \"https://api.shasta.trongrid.io\";\n       const tronWeb = new TronWeb(fullNode, solidityNode, eventServer);\n       tronwebww = tronWeb;\n     }\n      const tradeobj = await (window as any).tronWeb.transactionBuilder.sendTrx(dataToSign.to,dataToSign.amount,dataToSign.from,dataToSign.options);\n      let signTransaction = await tronwebww.trx.sign(tradeobj, privateKey); \n      return new Result(PredefinedStatus.SUCCESS(null))\n      \n    }catch(err){\n      const tradeobj = await (window as any).tronWeb.transactionBuilder.sendTrx(dataToSign.to,dataToSign.amount,dataToSign.from,dataToSign.options);\n      let signTransaction = await (window as any).tronWeb.trx.sign(tradeobj, privateKey);\n        return new Result(PredefinedStatus.NOT_SUPPORT(null))\n    }\n  \n  }\n}\nexport { SignTransactionPrivateKey }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nimport TronWeb from 'tronweb'\nclass SendTransaction{\n  public async sendTransaction(transactionObject:any){\n    try{\n      return  (window as any).tronWeb.trx.sendTransaction(transactionObject.address,transactionObject.amount).then((receipt)=>{\n        return new Result(PredefinedStatus.SUCCESS(receipt))\n      })\n    }catch(err){\n      return new Result(PredefinedStatus.DEFAULT_STATE(err))\n\n    }\n    \n  }\n}\nexport { SendTransaction }","import { Result } from '../result'\nimport PredefinedStatus  from '../../consts/consts'\nclass LoadContract{\n  public async loadContract(abiJson:any,contractAddress:string){\n    try{\n      let Contract: any = await (window as any).tronWeb.contract(abiJson,contractAddress)\n      return new Result(PredefinedStatus.SUCCESS(Contract))\n    }catch(err){\n      return new Result(PredefinedStatus.ERROR_STATE(null))\n    }\n  }\n}\nexport { LoadContract }","import { GetAccount } from \"./getAccount\"\nimport { GetBalance } from \"./getBalance\"\nimport { GetBlock } from './getBlock'\nimport { GetBlockNumber }  from './getBlockNumber' \nimport { GetTransaction } from './getTransaction'\nimport { GetTransactionCount } from './getTransactionCount'\nimport { SendSignedTransaction } from './sendSignedTransaction'\nimport { SignWithPrivateKey } from './signWithPrivateKey'\nimport { SignWithWallet } from './signWithWallet'\nimport { SignTransaction } from './signTransaction'\nimport { SignTransactionPrivateKey } from \"./signTransactionPrivateKey\"\nimport { SendTransaction } from './sendTransaction'\nimport { LoadContract } from './loadContract'\n\nclass ActionsIn{\n  constructor(){\n     \n  }\n  public async getAccount(address:string){\n    return await new GetAccount().getAccount(address)\n  }\n  public async getBalance(address:string){\n    return await new GetBalance().getBalance(address)\n  }\n  public async getBlock(block:string|number){\n    return await new GetBlock().getBlock(block)\n  }\n  public async getBlockNumber(block:string|number){\n    return await new GetBlockNumber().getBlockNumber(block)\n  }\n  public async getTransaction(txHash:string){\n    return await new GetTransaction().getTransaction(txHash)\n  }\n  public async getTransactionCount(){\n    return await new GetTransactionCount().getTransactionCount()\n  }\n  public async sendSignedTransaction(to,amount,from,options,privateKey:string){\n    return await new SendSignedTransaction().sendSignedTransaction(to,amount,from,options,privateKey)\n  }\n  public async signWithWallet(content:string,dataToSign?:object|string,address?:string){\n    return await new SignWithWallet().signWithWallet(content)\n  }\n\n  public async signWithPrivateKey(){\n    return await new SignWithPrivateKey().signWithPrivateKey()\n\n  }\n  public async signTransaction(dataToSign:object|string,address:string){\n    return await new SignTransaction().signTransaction(dataToSign,address)\n  }\n\n  public async signTransactionPrivateKey(dataToSign:object,privateKey:string){\n\n    return await new SignTransactionPrivateKey().signTransactionPrivateKey(dataToSign,privateKey)\n  }\n  public async sendTransaction(transactionObject:any){\n    return await new SendTransaction().sendTransaction(transactionObject)\n  }\n  public async loadContract(abiJson:any,contractAddress:string){\n    return await new LoadContract().loadContract(abiJson,contractAddress)\n  }\n \n}\n\nexport { ActionsIn } \n ","\nimport { Result } from \"../wrapper/actions/result\";\nimport PredefinedStatus from \"../wrapper/consts/consts\";\n\nconst defaultGas = {\n    price: \"4000000000\",\n    limit: \"150000\",\n    shouldPollResponse: true,\n};\nfunction GasSetting(setting): any {\n    setting.callValue = setting.callValue ? setting.callValue : defaultGas.price;\n    setting.feeLimit = setting.feeLimit ? setting.feeLimit : defaultGas.limit;\n    setting.shouldPollResponse = setting.shouldPollResponse ? setting.shouldPollResponse : defaultGas.shouldPollResponse;\n    return setting;\n}\n\nconst transactionResultGetter = (resolve, data, err) => {\n    let result;\n    // if (err) {\n    //     result = new Result(PredefinedStatus.ERROR_STATE(null));\n    // } else {\n        result = new Result(PredefinedStatus.SUCCESS(data));\n    // }\n    resolve(result);\n};\n\nexport {\n    GasSetting,\n    transactionResultGetter,\n};\n\n","\nimport { Result } from \"../wrapper/actions/result\"\nimport PredefinedStatus  from \"../wrapper/consts/consts\"\nimport { GasSetting , transactionResultGetter } from \"../wrapper/utils\"\n\n\nfunction getContractMethod(contract:any,methodName:string,param:any){\n  let method = contract ? contract.methods[methodName]:null\n  if(!method) return null\n  let prop = method(...param)._method\n  return {\n    prop:prop,\n    func:method\n  }\n}\n\nclass ContractCall {\n  public async offChainCall(contract:any,methodName:string,param:[],amount,extra){\n\n    let method = getContractMethod(contract,methodName,param)\n    if(!method){\n      return new Result(PredefinedStatus.ERROR_STATE('参数有误'))\n    }\n    return await new Promise(async res=>{\n      method!.func(...param).call((err,result)=>{\n        transactionResultGetter(res, result, err)\n\n      }).catch(reason=>{\n        transactionResultGetter(res, reason, null)\n      })\n    })\n  }\n\n  public async onChainCall(contract:any,methodName:string,param:any,extra:any){\n\n    let method = getContractMethod(contract,methodName,param) \n    if(!method){\n    return new Result(PredefinedStatus.ERROR_STATE(\"参数有误\"))\n\n    }\n    let gasSetting = GasSetting(extra)\n    let sendParam={\n      // from:account[0],\n      // gasPrice:gasSetting.gasPrice,\n      // gas:gasSetting.gasLimit\n      feeLimit:gasSetting.gasLimit,\n      callValue:gasSetting.gasPrice,\n      shouldPollResponse:gasSetting.shouldPollResponse,\n\n    }\n    return await new Promise(res=>{\n      method!.func(...param).send(sendParam,(err,tx)=>{\n        // transactionResultGetter(res, err, tx)\n      }).then(receipt=>{\n\n      transactionResultGetter(res, receipt, null)\n      }).catch(reason=>{\n      transactionResultGetter(res, reason, null)\n  });\n  });\n} \n}\nexport { ContractCall };\n\n","import { tronWebInstall } from '../tronweb'\nimport { ActionsIn }  from '../actions/actions/actions'\n\n// import { Connector } from '../connector'\n\nimport PredefinedStatus  from '../consts/consts'\nimport { Result } from '../actions/result'\nimport { ContractCall } from '../contractCall'\n\nclass Actions {\n  public actions:ActionsIn\n  // public connector:Connector\n  public contract:ContractCall\n  constructor() {\n    this.actions = new ActionsIn()\n    // this.connector = new Connector()\n    this.contract = new ContractCall()\n  }\n  public async init(){\n    (window as any).tronWeb = await tronWebInstall()\n\n    return new Result(PredefinedStatus.SUCCESS(null))\n  }\n}\n\nexport { Actions }\n"],"names":["TronWeb","require","HttpProvider","Result","constructor","data","this","code","message","Status","PredefinedStatus","SUCCESS","userData","DEFAULT_STATE","ERROR_STATE","NOT_SUPPORT","GetAccount","getAccount","address","accounts","window","tronWeb","trx","console","log","err","GetBalance","getBalance","Balance","GetBlock","getBlock","block","blockData","number","block_header","raw_data","parentHash","miner","witness_address","timestamp","hash","blockID","nonce","sha3Uncles","logsBloom","transactionsRoot","txTrieRoot","stateRoot","difficulty","totalDifficulty","extraData","size","gasLimit","gasUsed","transactions","length","uncles","GetBlockNumber","getBlockNumber","GetTransaction","getTransaction","txHash","Transaction","getTransactionInfo","blockNumber","transactionData","from","fromHex","contract","parameter","value","owner_address","to","contract_address","to_address","getIndex","i","id","txID","getAmount","amount","type","input","blockHash","transactionIndex","gas","gasPrice","GetTransactionCount","getTransactionCount","SendSignedTransaction","sendSignedTransaction","options","privateKey","providers","tronwebww","fullNode","solidityNode","tradeobj","transactionBuilder","sendTrx","signedtxn","sign","signTransaction","sendRawTransaction","SignWithPrivateKey","signWithPrivateKey","SignWithWallet","signWithWallet","dataToSign","SignTransaction","SignTransactionPrivateKey","signTransactionPrivateKey","SendTransaction","sendTransaction","transactionObject","then","receipt","LoadContract","loadContract","abiJson","contractAddress","Contract","ActionsIn","content","defaultGas","transactionResultGetter","resolve","result","getContractMethod","methodName","param","method","methods","prop","_method","func","ContractCall","offChainCall","extra","Promise","res","call","catch","reason","onChainCall","gasSetting","setting","callValue","feeLimit","shouldPollResponse","sendParam","send","tx","Actions","actions","init","async","isTronLink","tronWebInstall"],"mappings":"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"}